#!/usr/bin/env python3
"""
Portable AI Assistant
=====================

This script implements a simple AI assistant that runs from a USB drive. When
executed, it waits for an internet connection and then starts a small web
application. The web app allows you to ask questions via your browser and
returns responses generated by OpenAI's API. If the `OPENAI_API_KEY`
environment variable is not set or the API cannot be reached, an error
message is returned instead of an AI-generated response.

Features
--------
* Checks for an internet connection on startup and waits until one is
  available.
* Serves a minimal HTML page over HTTP using Flask. The page contains a
  text area for your query and displays the AI's response.
* Uses OpenAI's chat completion endpoint via the `openai` Python package.
  You must provide an API key via the `OPENAI_API_KEY` environment variable.
* Designed to be run from a portable Python environment on a USB drive.

Usage
-----
1. Install the dependencies listed in `requirements.txt` into your
   portable Python environment.
2. Set the `OPENAI_API_KEY` environment variable to your OpenAI API key.
3. Run `python run_ai.py`. The script waits for internet connectivity
   and then starts the web server on port 5000.
4. Navigate to `http://localhost:5000` in your browser to interact with the
   assistant.

Note: On Windows you may use the `launch.bat` script and on Unix-like
systems use `launch.sh` to start the assistant.
"""

import os
import time
import requests
from flask import Flask, render_template_string, request

try:
    import openai
except ImportError:
    openai = None  # Dependency is optional until you actually call the API


def is_connected(url: str = "https://www.google.com", timeout: int = 5) -> bool:
    """Check if the host can be reached.

    Args:
        url: URL to ping. Defaults to Google's homepage.
        timeout: Timeout in seconds for the request.

    Returns:
        True if the request succeeds, False otherwise.
    """
    try:
        requests.get(url, timeout=timeout)
        return True
    except requests.RequestException:
        return False


def get_ai_response(prompt: str) -> str:
    """Generate a response to the user's prompt using OpenAI.

    Args:
        prompt: The user's input question or statement.

    Returns:
        A string containing the AI-generated response or an error message.
    """
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        return (
            "Error: OPENAI_API_KEY environment variable is not set.\n"
            "Please set your API key before using the assistant."
        )

    if openai is None:
        return (
            "Error: The 'openai' package is not installed.\n"
            "Please install it via 'pip install openai' and try again."
        )

    openai.api_key = api_key
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": prompt},
            ],
        )
        return response["choices"][0]["message"]["content"].strip()
    except Exception as exc:  # Broad catch; in a real app you would narrow this down
        return f"Error retrieving AI response: {exc}"


# Flask application setup
app = Flask(__name__)

# Basic HTML template rendered by Flask. Using render_template_string keeps
# everything self-contained; you could separate this into a template file
# if you prefer.
HTML_TEMPLATE = """
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Portable AI Assistant</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 2em; }
    textarea { width: 100%; max-width: 600px; }
    input[type=submit] { margin-top: 1em; padding: 0.5em 1em; }
    .response { margin-top: 2em; padding: 1em; background-color: #f0f0f0; border-radius: 4px; }
  </style>
</head>
<body>
  <h1>Portable AI Assistant</h1>
  <p>Enter your question or prompt below and click <strong>Ask</strong> to receive a response.</p>
  <form method="post">
    <textarea name="prompt" rows="6" placeholder="Type your question here...">{{ prompt }}</textarea><br>
    <input type="submit" value="Ask">
  </form>
  {% if response %}
  <div class="response">
    <h2>Response:</h2>
    <p>{{ response }}</p>
  </div>
  {% endif %}
</body>
</html>
"""


@app.route("/", methods=["GET", "POST"])
def index():
    """Handle the root route of the Flask application."""
    prompt_text = ""
    response_text = ""
    if request.method == "POST":
        prompt_text = request.form.get("prompt", "").strip()
        if prompt_text:
            response_text = get_ai_response(prompt_text)
    return render_template_string(
        HTML_TEMPLATE, prompt=prompt_text, response=response_text
    )


def main() -> None:
    """Entry point for the script."""
    print("Checking internet connection...")
    while not is_connected():
        print("Waiting for internet connection...")
        time.sleep(5)
    print("Internet connected. Starting AI assistant web server.")
    # Start Flask server. host='0.0.0.0' makes it accessible on local network
    # if needed. Use threaded=True for responsiveness.
    app.run(host="0.0.0.0", port=5000, threaded=True)


if __name__ == "__main__":
    main()
